[
  {
    "objectID": "pmotools-python-usages/extracting_allele_tables.html",
    "href": "pmotools-python-usages/extracting_allele_tables.html",
    "title": "Extracting allele tables using pmotools-python",
    "section": "",
    "text": "To extract allele table information from a PMO the command line interactive script with pmotools-runner.py extract_allele_table can be used\n\npmotools-runner.py extract_allele_table\n\nRequired arguments\n\n\n--file - the PMO file to extract from\n\n--bioid - the tar_amp_bioinformatics_info_id id to extract the data from\n\n--output_stub - the output stub of the files to be created\n\n\nOptional arguments\n\nBy default only 3 fields are extracted by this extractor, 1) sampleID (experiment_sample_id), 2) locus (target_id), and 3) allele (microhaplotype_id) with those default column names. This can be controlled by --default_base_col_names and if you supply 3 comma separated values you can change the default header.\nYou can also add to the table any values from the other portions of the PMO file by using the following arguments\n\nadding fields arguments\n\n\n--specimen_info_meta_fields - Meta Fields if any to include from the specimen table\n\n--experiment_info_meta_fields - Meta Fields if any to include from the experiment table\n\n--microhap_fields - additional optional fields from the detected microhaplotype object to include\n\n--representative_haps_fields - additional optional fields from the detected representative object to include\n\n\n\nOther optional arguments have to do with the ouput file over writing and delimiter being used, use -h to see all arguments\n\nCodepmotools-runner.py extract_allele_table -h\n\nusage: pmotools-runner.py extract_allele_table [-h] --bioid BIOID --file FILE\n                                               [--delim DELIM] --output_stub\n                                               OUTPUT_STUB [--overwrite]\n                                               [--write_allele_freqs]\n                                               [--specimen_info_meta_fields SPECIMEN_INFO_META_FIELDS]\n                                               [--experiment_info_meta_fields EXPERIMENT_INFO_META_FIELDS]\n                                               [--microhap_fields MICROHAP_FIELDS]\n                                               [--representative_haps_fields REPRESENTATIVE_HAPS_FIELDS]\n                                               [--default_base_col_names DEFAULT_BASE_COL_NAMES]\n\noptions:\n  -h, --help            show this help message and exit\n  --bioid BIOID         bio ID to extract for\n  --file FILE           PMO file\n  --delim DELIM         the delimiter of the input text file, examples\n                        tab,comma\n  --output_stub OUTPUT_STUB\n                        Output json file path\n  --overwrite           If output file exists, overwrite it\n  --write_allele_freqs  also write out allele frequencies\n  --specimen_info_meta_fields SPECIMEN_INFO_META_FIELDS\n                        Meta Fields if any to include from the specimen table\n  --experiment_info_meta_fields EXPERIMENT_INFO_META_FIELDS\n                        Meta Fields if any to include from the experiment\n                        table\n  --microhap_fields MICROHAP_FIELDS\n                        additional optional fields from the detected\n                        microhaplotype object to include\n  --representative_haps_fields REPRESENTATIVE_HAPS_FIELDS\n                        additional optional fields from the detected\n                        representative object to include\n  --default_base_col_names DEFAULT_BASE_COL_NAMES\n                        default base column names, must be length 3\n\n\n\nCodewget https://seekdeep.brown.edu/Portable_Microhaplotype_Object/format/moz2018_PMO.json.gz \n\n\n\nCodemkdir -p example\ncd example \n\n# default \npmotools-runner.py extract_allele_table --file ../moz2018_PMO.json.gz --bioid Mozambique2018-SeekDeep --output_stub extraction --overwrite\n\n# changing default column names  \npmotools-runner.py extract_allele_table --file ../moz2018_PMO.json.gz --bioid Mozambique2018-SeekDeep --output_stub extraction --overwrite --default_base_col_names sample,target,hapid\n\n# changing file delimiter \npmotools-runner.py extract_allele_table --file ../moz2018_PMO.json.gz --bioid Mozambique2018-SeekDeep --output_stub extraction --overwrite --delim ,\n\n# adding other PMO fields \npmotools-runner.py extract_allele_table --file ../moz2018_PMO.json.gz --bioid Mozambique2018-SeekDeep --output_stub extraction --overwrite --specimen_info_meta_fields collection_country,parasite_density\n\n# adding other PMO fields including seq field \npmotools-runner.py extract_allele_table --file ../moz2018_PMO.json.gz --bioid Mozambique2018-SeekDeep --output_stub extraction --overwrite --specimen_info_meta_fields collection_country,parasite_density --representative_haps_fields seq\n\n\n\nMOIRE is a program that can be used to estimate COI and other population estimates from a population. See it’s github for full usage.\n\nCodemkdir -p example\ncd example \n\n# default table is all moire needs \npmotools-runner.py extract_allele_table --file ../moz2018_PMO.json.gz --bioid Mozambique2018-SeekDeep --output_stub extraction --overwrite\n\n\n\nCodedf &lt;- read.csv(\"example/extraction_allele_table.tsv\", sep = \"\\t\")\n\ndata &lt;- load_long_form_data(df)\n\n# With data in appropriate format, run MCMC as follows\nmcmc_results &lt;- moire::run_mcmc(data, is_missing = data$is_missing)\n\n\n\ndcifer is a program that can estimate IBD even from mixed infections. See it’s github for full usage\n\nCodemkdir -p example\ncd example \n\n# default \npmotools-runner.py extract_allele_table --file ../moz2018_PMO.json.gz --bioid Mozambique2018-SeekDeep --output_stub extraction --overwrite --delim ,\n\n# dcifer can calculate allele frequencies if not provided or you can have extract_allele_table write them as well \npmotools-runner.py extract_allele_table --file ../moz2018_PMO.json.gz --bioid Mozambique2018-SeekDeep --output_stub extraction --overwrite --write_allele_freqs --delim ,\n\n\n\nCodedsmp &lt;- readDat(\"example/extraction_allele_table.csv\", svar = \"sampleID\", lvar = \"locus\", avar = \"allele\")\n\nlrank &lt;- 2\ncoi   &lt;- getCOI(dsmp, lrank = lrank)\n\nafreq &lt;- calcAfreq(dsmp, coi, tol = 1e-5) \n\ndres0 &lt;- ibdDat(dsmp, coi, afreq, pval = TRUE, confint = TRUE, rnull = 0, \n                alpha = 0.05, nr = 1e3)"
  },
  {
    "objectID": "pmotools-python-usages/extracting_allele_tables.html#creating-output-for-moire",
    "href": "pmotools-python-usages/extracting_allele_tables.html#creating-output-for-moire",
    "title": "Extracting allele tables using pmotools-python",
    "section": "",
    "text": "MOIRE is a program that can be used to estimate COI and other population estimates from a population. See it’s github for full usage.\n\nCodemkdir -p example\ncd example \n\n# default table is all moire needs \npmotools-runner.py extract_allele_table --file ../moz2018_PMO.json.gz --bioid Mozambique2018-SeekDeep --output_stub extraction --overwrite\n\n\n\nCodedf &lt;- read.csv(\"example/extraction_allele_table.tsv\", sep = \"\\t\")\n\ndata &lt;- load_long_form_data(df)\n\n# With data in appropriate format, run MCMC as follows\nmcmc_results &lt;- moire::run_mcmc(data, is_missing = data$is_missing)"
  },
  {
    "objectID": "pmotools-python-usages/extracting_allele_tables.html#creating-output-for-dcifer",
    "href": "pmotools-python-usages/extracting_allele_tables.html#creating-output-for-dcifer",
    "title": "Extracting allele tables using pmotools-python",
    "section": "",
    "text": "dcifer is a program that can estimate IBD even from mixed infections. See it’s github for full usage\n\nCodemkdir -p example\ncd example \n\n# default \npmotools-runner.py extract_allele_table --file ../moz2018_PMO.json.gz --bioid Mozambique2018-SeekDeep --output_stub extraction --overwrite --delim ,\n\n# dcifer can calculate allele frequencies if not provided or you can have extract_allele_table write them as well \npmotools-runner.py extract_allele_table --file ../moz2018_PMO.json.gz --bioid Mozambique2018-SeekDeep --output_stub extraction --overwrite --write_allele_freqs --delim ,\n\n\n\nCodedsmp &lt;- readDat(\"example/extraction_allele_table.csv\", svar = \"sampleID\", lvar = \"locus\", avar = \"allele\")\n\nlrank &lt;- 2\ncoi   &lt;- getCOI(dsmp, lrank = lrank)\n\nafreq &lt;- calcAfreq(dsmp, coi, tol = 1e-5) \n\ndres0 &lt;- ibdDat(dsmp, coi, afreq, pval = TRUE, confint = TRUE, rnull = 0, \n                alpha = 0.05, nr = 1e3)"
  },
  {
    "objectID": "References.html",
    "href": "References.html",
    "title": "References",
    "section": "",
    "text": "Tessema, Sofonias K, Nicholas J Hathaway, Noam B Teyssier, Maxwell Murphy, Anna Chen, Ozkan Aydemir, Elias M Duarte, et al. 2022. “Sensitive, Highly Multiplexed Sequencing of Microhaplotypes from the Plasmodium Falciparum Heterozygome.” J. Infect. Dis. 225 (April): 1227–37."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Portable Microhaplotype Object (PMO)",
    "section": "",
    "text": "Website hosting documentation on the tools for interacting with the Portable Microhaplotype Object (PMO) files.\nCurrently tool development is being done for python, pmotools-python but in future will include other languages like R"
  },
  {
    "objectID": "Tools_Installation/pmotools-python_installation.html",
    "href": "Tools_Installation/pmotools-python_installation.html",
    "title": "pmotools-python installation",
    "section": "",
    "text": "pmotools-python is a tool base for interacting with the PMO format file in python. It provides both code to include in your python package as well as a command line interface to run some basic scripts on PMO files.\n\npmotools-python code can be found on github https://github.com/PlasmoGenEpi/pmotools-python/tree/develop\n\nDownloading repo\n\nCodegit clone git@github.com:PlasmoGenEpi/pmotools-python.git\n\n\nCurrently (as 2024-10) majority of code is currently still in develop branch\n\nCodecd pmotools-python\ngit checkout develop\n\n\n\nTo set up environment that has all the python libraries install a env library is included and can be install/activated via conda or mamba\n\nCodeconda env create -f envs/pmotools-env.yml \n\nconda active pmotools\n\n\n\nFrom within repo can install with pip in a virtual environment\n\nCodepip install -e . \n\n\n\npmotools-python can be included in python scripts but also there is a command line interface that includes several utilities that uses the code base, this interface can be included by including the scripts directory in your PATH or by calling the script directory\n\nCode# navigate to git directory\ncd pmotools-python\n\n##  add to path (must be done when within the git directory, or replace $(pwd) with the full path nmae to the git repo\nexport PATH=\"$(pwd)/scripts:$PATH\"\n\n\n\nTo enable bash auto-completion for pmotools-runner.py script located in the scripts directory mentioned above, add the following to your ~/.bash_completion and make sure it’s being loaded as part of your .bashrc and/or ~/.bash_profile (on MacOS) or ~/.profile (on ubuntu)\n\nCode_comp_pmotools_runner()\n{\n    local cur prev opts base\n    COMPREPLY=()\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n    if [[ $COMP_CWORD -lt 2 ]] ; then\n        opts=$(for x in `${COMP_WORDS[0]} | grep \"^\\s.*-\" | sed 's/ -.*//g' | tr -d '[:blank:]'`; do echo ${x} ; done )\n        COMPREPLY=($(compgen -W \"${opts}\" -- ${cur}))\n    elif [[ ${cur} == -* ]]; then\n        opts=$(for x in `${COMP_WORDS[0]} ${COMP_WORDS[1]} -h | grep \" -\" | sed \"s/^. *-/-/g\" | sed \"s/   .*//g\" | sed \"s/, / /g\"`; do echo ${x} ; done )\n        COMPREPLY=($(compgen -W \"${opts}\" -- ${cur}))\n    else\n        _filedir\n    fi\n   return 0\n}\n\n\ncomplete -F _comp_pmotools_runner pmotools-runner.py\n\n\nThe above can also be found within the repo in the etc/ folder."
  },
  {
    "objectID": "Tools_Installation/pmotools-python_installation.html#installation",
    "href": "Tools_Installation/pmotools-python_installation.html#installation",
    "title": "pmotools-python installation",
    "section": "",
    "text": "pmotools-python code can be found on github https://github.com/PlasmoGenEpi/pmotools-python/tree/develop\n\nDownloading repo\n\nCodegit clone git@github.com:PlasmoGenEpi/pmotools-python.git\n\n\nCurrently (as 2024-10) majority of code is currently still in develop branch\n\nCodecd pmotools-python\ngit checkout develop\n\n\n\nTo set up environment that has all the python libraries install a env library is included and can be install/activated via conda or mamba\n\nCodeconda env create -f envs/pmotools-env.yml \n\nconda active pmotools\n\n\n\nFrom within repo can install with pip in a virtual environment\n\nCodepip install -e . \n\n\n\npmotools-python can be included in python scripts but also there is a command line interface that includes several utilities that uses the code base, this interface can be included by including the scripts directory in your PATH or by calling the script directory\n\nCode# navigate to git directory\ncd pmotools-python\n\n##  add to path (must be done when within the git directory, or replace $(pwd) with the full path nmae to the git repo\nexport PATH=\"$(pwd)/scripts:$PATH\"\n\n\n\nTo enable bash auto-completion for pmotools-runner.py script located in the scripts directory mentioned above, add the following to your ~/.bash_completion and make sure it’s being loaded as part of your .bashrc and/or ~/.bash_profile (on MacOS) or ~/.profile (on ubuntu)\n\nCode_comp_pmotools_runner()\n{\n    local cur prev opts base\n    COMPREPLY=()\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n    if [[ $COMP_CWORD -lt 2 ]] ; then\n        opts=$(for x in `${COMP_WORDS[0]} | grep \"^\\s.*-\" | sed 's/ -.*//g' | tr -d '[:blank:]'`; do echo ${x} ; done )\n        COMPREPLY=($(compgen -W \"${opts}\" -- ${cur}))\n    elif [[ ${cur} == -* ]]; then\n        opts=$(for x in `${COMP_WORDS[0]} ${COMP_WORDS[1]} -h | grep \" -\" | sed \"s/^. *-/-/g\" | sed \"s/   .*//g\" | sed \"s/, / /g\"`; do echo ${x} ; done )\n        COMPREPLY=($(compgen -W \"${opts}\" -- ${cur}))\n    else\n        _filedir\n    fi\n   return 0\n}\n\n\ncomplete -F _comp_pmotools_runner pmotools-runner.py\n\n\nThe above can also be found within the repo in the etc/ folder."
  }
]